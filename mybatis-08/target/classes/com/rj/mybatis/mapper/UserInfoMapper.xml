<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rj.mybatis.dao.UserInfoMapper">
    <!--开启本mapper的namespace下的二级缓存-->
    <!--
        eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
        (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
        (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU，
                移除最长时间不用的对形象

        flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果你不配置它，那么当
        SQL被执行的时候才会去刷新缓存。

        size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。
        这里配置的是1024个对象

        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有
        办法修改缓存，他的默认值是false，不允许我们修改
    -->
    <cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>
    
    <insert id="insertUser" parameterType="userInfo" >
        insert into user_info values (#{id},#{uName},#{uAge},#{time});
    </insert>
    <!--可以通过设置useCache来规定这个sql是否开启缓存，ture是开启，false是关闭-->
    <select id="getQueryAllUser" resultMap="queryMap" parameterType="_int" useCache="true" flushCache="true">
        select * from user_info where id=#{id}
    </select>
    <resultMap id="queryMap" type="userInfo">
        <result property="id" column="id"></result>
        <result property="uName" column="uname"></result>
        <result property="uAge" column="uage"></result>
        <result property="time" column="utime"></result>
    </resultMap>
<!--    if语句-->
        <!--刷新二级缓存-->
    <select id="queryUserByIf" resultMap="queryMap" parameterType="map" useCache="false">
        select * from user_info
        <where>
            <if test="id !=null" >
                id =#{id}
            </if>
            <if test="uAge!=null">
                or uage=#{uAge}
            </if>
        </where>
    </select>
<!--    choose查询,注意#是防止sql注入自动在字段外加'号，group by查询时可能查不到，所以使用$-->
    <select id="queryUserByChoose" parameterType="map" resultMap="queryMap" resultType="userInfo">
        select * from user_info
        <where>
            <choose>
                <when test="id!=null">id =#{id}</when>
                <when test="uAge!=null">uage =#{uAge}</when>
                <when test="uName!=null">uname =#{uName}</when>
                <when test="time!=null">utime =#{utime}</when>
                <otherwise></otherwise>
            </choose>
        </where>
        <if test="column!=null">group by ${column}</if>
    </select>
<!--    更新语句-->
    <update id="updateUser" parameterType="userInfo" flushCache="true">
        update user_info
        <include refid="set-if"></include>
        <where>
            id=#{id}
        </where>
    </update>
<!--    写sql片段-->
    <sql id="set-if" >
        <set>
            <if test="uName!=null">
                uname=#{uName},
            </if>
            <if test="uAge!=null">
                uage=#{uAge},
            </if>
            <if test="time!=null">
                utime=#{time}
            </if>
        </set>
    </sql>
<!--    遍历查询-->
    <select id="foreachUser" resultType="userInfo" resultMap="queryMap" parameterType="list">
        select * from user_info
        <where>
            id in
            <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </where>
    </select>
</mapper>